
global uu ug Mx My Mz Nx Ny Nz Nd Lx Lz a b lx lz alpha gamma N uspec1 uspec2 uspec3 v_grid1 r_grid1 dx1 dy1 dz1

open('UB.mat');      % Upper Branch equilibrium
uu = ans.UB;
open('UB_geom.mat');
ug = ans.UB_geom;

 % geometry settings, don't edit
 Mx = ug(1); My = ug(2); Mz = ug(3); Nx = ug(4); Ny = ug(5); Nz = ug(6);
 Nd = ug(7); Lx = ug(8); Lz = ug(9); a = ug(10); b = ug(11);
 lx = ug(12); lz = ug(13); alpha = ug(14); gamma = ug(15);
 N = size(uu,1);
 % create a column vector containing the spectral coefficients, for each component
uspec1_re = uu(1:N/3,1);
uspec1_im = uu(1:N/3,2);
uspec2_re = uu(N/3+1:2*N/3,1);
uspec2_im = uu(N/3+1:2*N/3,2);
%uspec3 = zeros(N/3,1);
%uspec3 = uu(2*N/3+1:N,1) + i*uu(2*N/3+1:N,2);
uspec3_re = uu(2*N/3+1:N,1);
uspec3_im = uu(2*N/3+1:N,2);
 % end geometry settings
 
nx = 10;
ny = 8;
nz = 10;
dx1 = Lx/nx;
dy1 = (b-a)/ny;
dz1 = Lz/nz;

tic
[v_grid1,r_grid1] = mk_vgrid_c([nx ny nz dx1 dy1 dz1 Mx My Mz Lx Lz],uspec1_re,uspec1_im,uspec2_re,uspec2_im,uspec3_re,uspec3_im);
% for i = 0:nx
%     for j = 0:ny
%         for k = 0:nz
%             rr = [i*dx a+j*dy k*dz];
%             u = u_sum(0,rr);
%             v_grid(1,i+1,j+1,k+1) = u(1);
%             v_grid(2,i+1,j+1,k+1) = u(2);
%             v_grid(3,i+1,j+1,k+1) = u(3);
%             r_grid(1,i+1,j+1,k+1) = rr(1);
%             r_grid(2,i+1,j+1,k+1) = rr(2);
%             r_grid(3,i+1,j+1,k+1) = rr(3);
%         end
%     end
% end
toc
